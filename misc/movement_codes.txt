-------------------------------------------------------------------------------
Movement control code system: terse reference
-------------------------------------------------------------------------------

00                = [8095F2] End

01 XX             = [809603] Loop start
                      XX: Number of iterations

02                = [809627] Loop end

03 XX XX XX       = [80964D] Unconditional long jump to movement
                      XX: Destination address

04 XX XX XX       = [809685] Unconditional long call to movement
                      XX: Destination address

05                = [8096AA] Unconditional long return

06 XX             = [8096C3] Pause
                      XX: Duration in 1/60 second increments

07 XX XX          = [8099DD] *** UNKNOWN ***  <-- Short pointer argument, some kind of conditional jump/call?

08 XX XX XX       = [809A1A] *** UNKNOWN ***  <-- Writes long pointer to 7E107A (low), 7E10B6 (bank): Argument pointer

09                = [809A2E] Halt

0A XX XX          = [80995D] Conditional (tempvar == 0) short jump to movement
                      XX: Destination address

0B XX XX          = [80996B] Conditional (tempvar != 0) short jump to movement
                      XX: Destination address

0C                = [8099C3] *** UNKNOWN ***  <-- Jumps to [00] code, conditional on something unknown.

0D XX XX YY ZZ ZZ = [809A9F] Perform binary operation on WRAM
                      XX: WRAM address
                      YY: Operation
                      ZZ: Operand

0E XX YY YY       = [809AE2] Write a word to a C09AF9 table-entry
                      XX: Index value for C09AF9
                      YY: Word to be written

0F                = [809B09] *** UNKNOWN ***  <-- Writes long pointer to 7E107A (low), 7E10B6 (bank): 0xC0943B

10 XX (YY YY)     = [809979] Switch statement indexed by tempvar (short jump to movement?)

11 XX (YY YY)     = [80999E] Switch statement indexed by tempvar (short call to movement?)

12 XX XX YY       = [809B0F] Write a byte to WRAM
                      XX: WRAM address
                      YY: Byte to be written

13                = [809A0E] *** UNKNOWN ***  <-- Jumps to [0C] code, conditional on something unknown.

14 XX YY ZZ ZZ    = [809A87] Perform binary operation on a C09AF9 table-entry
                      XX: Index value for C09AF9
                      YY: Operation
                      ZZ: Operand

15 XX XX YY YY    = [809B1F] Write a word to WRAM
                      XX: WRAM address
                      YY: Word to be written

16 XX XX          = [809B2C] Conditional (tempvar == 0) short jump w/ stack weirdness
                      XX: Destination address

17 XX XX          = [809B44] Conditional (tempvar != 0) short jump w/ stack weirdness
                      XX: Destination address

18 XX XX YY ZZ    = [809A5C] Perform binary operation on WRAM
                      XX: WRAM address
                      YY: Operation
                      ZZ: Operand

19 XX XX          = [809649] Unconditional short jump to movement
                      XX: Destination address

1A XX XX          = [809658] Unconditional short call to movement
                      XX: Destination address

1B                = [80966F] Unconditional short return

1C XX XX XX       = [809B4D] *** UNKNOWN ***  <-- Writes long pointer to 7E112E (low), 7E116A (bank): Used only once

1D XX XX          = [809B61] Write a word to tempvar
                      XX: Word to be written

1E XX XX          = [809B6B] Write WRAM to tempvar
                      XX: WRAM address

1F XX             = [809B79] Write tempvar to a C09AF9 table-entry
                      XX: Index value for C09AF9

20 XX             = [809B91] Write a C09AF9 table-entry value to tempvar
                      XX: Index value for C09AF9

21 XX             = [809BB4] Write a C09AF9 table-entry value to the wait timer
                      XX: Index value for C09AF9

22 XX XX          = [809BE4] *** UNKNOWN ***  <-- Write a word to 7E11E2 (Short jump to assembly, C0 bank)
                                     <-- Callback: ???

23 XX XX          = [809BEE] *** UNKNOWN ***  <-- Write a word to 7E11A6 (Short call to assembly, C0 bank)
                                     <-- Callback: Recalculate screen coordinates in 7E0B16, 7E0B52?

24                = [809620] Loop with tempvar iterations

25 XX XX          = [809BF8] *** UNKNOWN ***  <-- Write a word to 7E121E (Short call to assembly, C0 bank)
                                     <-- Callback: Atomic motion?

26 XX             = [809BCC] *** UNKNOWN ***  <-- Write a C09AF9 table-entry value to 7E10F2

27 XX YY YY       = [809A97] Perform binary operation on tempvar
                      XX: Operation
                      YY: Operand

28 XX XX          = [8096E3] Set X position (Absolute)
                      XX: X-coordinate, measured in pixels

29 XX XX          = [8096F3] Set Y position (Absolute)
                      XX: Y-coordinate, measured in pixels

2A XX XX          = [809703] Set Z position (Absolute)
                      XX: Z-coordinate, measured in pixels

2B XX XX          = [8098A0] Set X position (Relative to current position)
                      XX: Change in X-coordinate, measured in pixels

2C XX XX          = [8098AE] Set Y position (Relative to current position)
                      XX: Change in Y-coordinate, measured in pixels

2D XX XX          = [8098BC] Set Z position (Relative to current position)
                      XX: Change in Z-coordinate, measured in pixels

2E XX XX          = [80976D] Set X velocity (Relative to current velocity)
                      XX: Change in X-velocity, measured in pixels per 256 frames

2F XX XX          = [809792] Set Y velocity (Relative to current velocity)
                      XX: Change in Y-velocity, measured in pixels per 256 frames

30 XX XX          = [8097B7] Set Z velocity (Relative to current velocity)
                      XX: Change in Z-velocity, measured in pixels per 256 frames



----- These eight are similar to each other -----
31 XX YY YY       = [8097DC] *** UNKNOWN ***
32 XX YY YY       = [8097EF] *** UNKNOWN ***
33 XX YY YY       = [809802] *** UNKNOWN ***
34 XX YY YY       = [809826] *** UNKNOWN ***
35 XX YY YY       = [80984A] *** UNKNOWN ***
36 XX YY YY       = [809875] *** UNKNOWN ***
37 XX YY YY       = [8098CA] *** UNKNOWN ***
38 XX YY YY       = [8098DE] *** UNKNOWN ***



39                = [8098F2] Set all three velocities to zero



3A XX             = [80991C] *** UNKNOWN ***
3B XX             = [8096CF] *** UNKNOWN ***   7E10F2 entry = XX    (Special case: 7E10F2 = 0xFFFF if XX is 0xFF)
3C                = [809A38] *** UNKNOWN ***   7E10F2 entry += 1    (Never used?)
3D                = [809A3E] *** UNKNOWN ***   7E10F2 entry -= 1    (Never used?)
3E XX             = [809A44] *** UNKNOWN ***   7E10F2 entry += XX   (Never used?)



3F XX XX          = [809713] Set X velocity (Absolute)
                      XX: X-velocity, measured in pixels per 256 frames

40 XX XX          = [809731] Set Y velocity (Absolute)
                      XX: Y-velocity, measured in pixels per 256 frames

41 XX XX          = [80974F] Set Z velocity (Absolute)
                      XX: Z-velocity, measured in pixels per 256 frames

42 XX XX XX ...   = [80993D] Long call to assembly (sometimes takes more arguments, see 42codes.txt)
                      XX: Destination address

43 XX             = [809931] *** UNKNOWN ***

44                = [809BA9] Write tempvar to the wait timer

----- These are copies of others -----
45 XX             = [8096CF] *** COPY OF 3B ***
46                = [809A38] *** COPY OF 3C ***
47                = [809A3E] *** COPY OF 3D ***
48 XX             = [809A44] *** COPY OF 3E ***
49 XX XX          = [809713] *** COPY OF 3F ***
4A XX XX          = [809731] *** COPY OF 40 ***
4B XX XX          = [80974F] *** COPY OF 41 ***
4C XX XX XX ...   = [80993D] *** COPY OF 42 ***
-------------------------------------------------------------------------------

Operations
Used by [0D XX XX YY ZZ ZZ] and [18 XX XX YY ZZ]

  00 = AND
  01 = OR
  02 = Addition
  03 = XOR

-------------------------------------------------------------------------------

.